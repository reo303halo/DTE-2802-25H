@page "/todoList"
@using TodoApp.Data.Models
@inject HttpClient Client
@rendermode InteractiveServer

<h3 class="text-center my-4">Todo List (@_todoItems.Count(t => !t.IsDone))</h3>

@if (_todoItems.Count == 0)
{
    <div class="text-center">
        <p><em>No tasks.</em></p>
    </div>
}
else
{
    <div class="container">
        <div class="row">
            @foreach (var item in _todoItems)
            {
                <div class="col-md-4 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">@item.Name</h5>
                            <p class="card-text">
                                <input type=checkbox @bind="item.IsDone"> @(item.IsDone ? "Completed" : "Pending")
                            </p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    
    <input @bind="@_newTodo">
    <button @onclick="AddTodo">Add todo</button>
}

@code {
    private List<TodoItem> _todoItems = [];
    string _newTodo = "";
    const string Url = "https://localhost:7122/api/Todo"; // Change to your APIs url

    protected override async Task OnInitializedAsync()
    {
        var todoArray = await Client.GetFromJsonAsync<TodoItem[]>(Url);
        if (todoArray != null) _todoItems = todoArray.ToList();
    }

    private async Task AddTodo()
    {
        if (string.IsNullOrWhiteSpace(_newTodo)) return;

        var newItem = new TodoItem { Name = _newTodo, IsDone = false };
        var response = await Client.PostAsJsonAsync(Url, newItem);

        if (response.IsSuccessStatusCode)
        {
            _todoItems.Add(newItem); // Add to the local list
            _newTodo = ""; // Clear the input field
        }
        else
        {
            // Handle error
        }
    }
}